/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

        withName: ARIA2_UNTAR {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/CheckM/checkm_downloads" },
            mode: params.publish_dir_mode,
            overwrite: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_checkm_data
        ]
    }

    withName: 'CHECKM_LINEAGEWF' {
        tag = { "${meta.assembler}-${meta.id}" }
        ext.prefix = { "${meta.assembler}-${meta.id}_wf" }
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/CheckM" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CHECKM_QA' {
        ext.prefix = { "${meta.assembler}-${meta.id}_qa" }
        ext.args = "-o 2 --tab_table"
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/CheckM" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'COMBINE_CHECKM_TSV' {
        ext.prefix = { "checkm_summary" }
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GUNC_DOWNLOADDB' {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/GUNC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.gunc_save_db
        ]
    }

    // Make sure to keep directory in sync with gunc_qc.nf
    withName: 'GUNC_RUN' {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/GUNC/raw/${meta.assembler}-${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Make sure to keep directory in sync with gunc_qc.nf
    withName: 'GUNC_MERGECHECKM' {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/GUNC/checkmmerged/${meta.assembler}-${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
